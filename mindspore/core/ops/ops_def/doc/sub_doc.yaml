sub:
    description: |
        Subtracts the second value from the first input Tensor.

        .. math::

            out_{i} = x_{i} - y_{i}

        Note:
            - When the two inputs have different shapes,
              they must be able to broadcast to a common shape.
            - The two inputs can not be bool type at the same time,
              [True, Tensor(True, bool\_), Tensor(np.array([True]), bool\_)] are all considered bool type.
            - The two inputs comply with the implicit type conversion rules to make the data types
              consistent.

        Args:
            x (Union[Tensor, number.Number, bool]): The first input is a number.Number or
                a bool or a tensor whose data type is
                `number <https://www.mindspore.cn/docs/en/master/api_python/mindspore.html#mindspore.dtype>`_ or
                `bool_ <https://www.mindspore.cn/docs/en/master/api_python/mindspore.html#mindspore.dtype>`_.
            y (Union[Tensor, number.Number, bool]): The second input, is a number.Number or
                a bool or a tensor whose data type is
                `number <https://www.mindspore.cn/docs/en/master/api_python/mindspore.html#mindspore.dtype>`_ or
                `bool_ <https://www.mindspore.cn/docs/en/master/api_python/mindspore.html#mindspore.dtype>`_.

        Returns:
            Tensor, the shape is the same as the one of the input `x`, `y` after broadcasting,
            and the data type is the one with higher precision or higher digits among the two inputs.

        Raises:
            TypeError: If `x` and `y` are not one of the following: Tensor, number.Number, bool.

        Supported Platforms:
            ``Ascend`` ``GPU`` ``CPU``

        Examples:
            >>> import numpy as np
            >>> from mindspore import Tensor, ops
            >>> # case 1: x and y are both Tensor.
            >>> x = Tensor(np.array([4, 5, 6]).astype(np.float32))
            >>> y = Tensor(np.array([1, 2, 3]).astype(np.float32))
            >>> output = ops.sub(x, y)
            >>> print(output)
            [3. 3. 3.]
            >>> # case 2: x is a Tensor and y is a scalar
            >>> x = Tensor(np.array([4, 5, 6]).astype(np.float32))
            >>> y = Tensor(1, mindspore.int32)
            >>> output = ops.sub(x, y)
            >>> print(output)
            [3. 4. 5.]
            >>> # the data type of x is float32, the data type of y is int32,
            >>> # and the output is the data format of higher precision float32.
            >>> print(output.dtype)
            Float32
